package programacion_dinamica;

import java.util.HashMap;

public class menor_cantidad_pasos_a_uno {
	public static HashMap<Integer, Integer> lista_valores;
	public static HashMap<Integer, Integer> lista_fibonacci;
	
	static {
		lista_valores = new HashMap<Integer, Integer>();
		lista_fibonacci = new HashMap<Integer, Integer>();
	}
	
	public static int menor_cant(int n) {
		if(lista_valores.containsKey(n)) {
			return lista_valores.get(n);
		}
		if(n>1) {
			if(n % 2 == 0 && n % 3 == 0) {
				lista_valores.put(n, 1 + min(menor_cant(n-1), menor_cant(n/2), menor_cant(n/3)));
			}
			if(n % 2 == 0) {
				lista_valores.put(n, 1 + min(menor_cant(n - 1), menor_cant(n / 2), menor_cant(n / 2)));
			}
			if(n % 3 == 0) {
				lista_valores.put(n, 1 + min(menor_cant(n - 1), menor_cant(n / 3), menor_cant(n / 3)));
			}else {
				lista_valores.put(n, 1 + menor_cant(n-1));
			}
			return lista_valores.get(n);
		}
		return 0;
	}
	
	public static int fibonacciOptimo(int n) {
		if(n > 0) {
			if(lista_fibonacci.containsKey(n)) {
				return lista_fibonacci.get(n);
			}else {
				int res =  lista_fibonacci.getOrDefault(n-1, fibonacciOptimo(n-1)) +
								lista_fibonacci.getOrDefault(n-2, fibonacciOptimo(n-2));
				
				lista_fibonacci.put(n, res);
				
				return res;
			}
		}
		
		return 0;
	}
	
	public static int min(int a, int b, int c) {
		if(a < b && a < c) {
			return a;
		}else if(b < c) {
			return b;
		}
		return c;
	}
}
